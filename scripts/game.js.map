{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/index.js",
    "src/states/GameState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "import GameState from 'states/GameState';\n\nclass Game extends Phaser.Game {\n\n\tconstructor() {\n\t\tsuper(500, 500, Phaser.AUTO, 'content', null,false,false);\n\t\tthis.state.add('GameState', GameState, false);\n\t\tthis.state.start('GameState');\n\t}\n\n}\n\nnew Game();\n",
    "class GameState extends Phaser.State {\n    preload () {\n        this.game.load.image('chen', 'images/issam.png');\n        this.game.load.image('barH', 'images/barH.png');\n        this.game.load.image('barV', 'images/barV.png');\n        this.game.load.image('bar', 'images/bar.png');\n        this.game.load.image('pikachu', 'images/chit.png');\n        this.game.load.image('grotadmorv', 'images/lydia.png');\n        this.game.load.image(\"bg\",\"images/bg.png\")\n    }\n\n    create () {\n        this.game.stage.backgroundColor = '#213638';\n\n        // Perso\n        this.chen = this.game.add.sprite(this.game.width / 2, this.game.height - 50, 'chen')\n        this.chen.scale.setTo(1);\n        this.chen.anchor.setTo(0.5);\n        this.game.physics.arcade.enable(this.chen);\n        this.chen.body.gravity.y = 400;\n\n        // Cursor\n        this.cursor = this.game.input.keyboard.createCursorKeys();\n\n        // Cadre\n        this.createCadre();\n        this.createBoard();\n\n        // Pikachu\n        this.pikachu = this.game.add.sprite(20, 20, 'pikachu');\n        this.game.physics.arcade.enable(this.pikachu);\n\n        // Grotadmorv\n        this.grotadmorvs = this.game.add.group();\n        this.grotadmorvs.enableBody = true;\n        this.grotadmorvs.createMultiple(70, 'grotadmorv');\n\n        this.game.time.events.loop(1000, this.goGrotadmorv, this)\n    }\n\n    goGrotadmorv () {\n        const grotadmorv = this.grotadmorvs.getFirstDead();\n        if (!grotadmorv) return;\n\n        const height = this.game.height;\n        const width = this.game.width;\n\n        const pos = [\n            { x: 0, y: this.game.rnd.between(0, height) },\n            { x: width, y: this.game.rnd.between(0, height) },\n            { x: this.game.rnd.between(0, width), y: 0 },\n            { x: this.game.rnd.between(0, width), y: height }\n        ]\n\n        const newPos = this.game.rnd.pick(pos);\n\n        grotadmorv.reset(newPos.x, newPos.y);\n\n        if (newPos === pos[0]) {\n            grotadmorv.body.velocity.x = 200\n        } else if (newPos === pos[1]) {\n            grotadmorv.body.velocity.x = -200\n        } else if (newPos === pos[2]) {\n            grotadmorv.body.velocity.y = 200\n        } else {\n            grotadmorv.body.velocity.y = -200\n        }\n\n        grotadmorv.checkWorldBounds = true;\n        grotadmorv.outOfBoundsKill = true\n    }\n\n    createBoard () {\n        this.board = this.game.add.group();\n        this.board.enableBody = true;\n\n        const pos = [\n            { x: 20, y: 80 },\n            { x: 250, y: 100 },\n            { x: 380, y: 150 },\n            { x: 280, y: 220 },\n            { x: 20, y: 270 },\n            { x: 150, y: 350 },\n            { x: 380, y: 420 }\n        ]\n\n        pos.map(crd => {\n            this.game.add.sprite(crd.x, crd.y, 'bar', 0, this.board)\n        })\n\n        this.board.setAll('body.immovable', true)\n    }\n\n    createCadre () {\n        this.cadre = this.game.add.group()\n        this.cadre.enableBody = true\n\n        // Côtés\n        this.game.add.sprite(0, 0, 'barV', 0, this.cadre)\n        this.game.add.sprite(this.game.width - 12, 0, 'barV', 0, this.cadre)\n        // Haut\n        this.game.add.sprite(0, 0, 'barH', 0, this.cadre)\n        // Bas\n        this.game.add.sprite(0, this.game.height - 12, 'bar', 0, this.cadre)\n        this.game.add.sprite(this.game.width - 100, this.game.height - 12, 'bar', 0, this.cadre)\n        const barMilieu = this.game.add.sprite(this.game.width / 2, this.game.height - 12, 'bar', 0, this.cadre)\n        barMilieu.anchor.setTo(0.5, 0)\n\n        this.cadre.setAll('body.immovable', true)\n    }\n\n    moveChen () {\n        if (this.cursor.left.isDown) {\n            this.chen.body.velocity.x = -150\n        } else if (this.cursor.right.isDown) {\n            this.chen.body.velocity.x = 150\n        } else {\n            this.chen.body.velocity.x = 0\n        }\n\n        if (this.cursor.up.isDown && this.chen.body.touching.down) {\n            this.chen.body.velocity.y = -250\n        }\n    }\n\n    catchPikachu () {\n        this.pikachu.kill()\n        this.grotadmorvs.removeAll()\n        setTimeout(() => {\n            this.game.state.start('GameState')\n        }, 2000)\n    }\n\n    gameOver () {\n        this.chen.kill()\n    }\n\n    update () {\n        this.game.physics.arcade.collide(this.chen, [this.cadre, this.board])\n        this.game.physics.arcade.overlap(this.chen, this.pikachu, this.catchPikachu, null, this)\n        this.game.physics.arcade.overlap(this.chen, this.grotadmorvs, this.gameOver, null, this)\n\n        this.moveChen();\n\n        if (!this.chen.inWorld || !this.chen.alive) {\n            this.game.state.start('GameState')\n        }\n    }\n}\n\nexport default GameState\n"
  ]
}